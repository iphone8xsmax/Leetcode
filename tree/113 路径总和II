给定一个二叉树和一个目标和，找到所有从根节点到叶子节点路径总和等于给定目标和的路径。
说明: 叶子节点是指没有子节点的节点。

示例:
给定如下二叉树，以及目标和 sum = 22，
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
返回:
[
   [5,4,11,2],
   [5,8,4,5]
]

/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */

 //深度遍历加回溯算法
func pathSum(root *TreeNode, sum int) [][]int {
    var ret [][]int
    var path []int //路径

    return dfs(root,path,ret,sum) //深度遍历
}

func dfs(root *TreeNode,path []int,ret [][]int,sum int) [][]int{
        if root == nil {
            return ret
        }
        sum -= root.Val   //更新目标值
        path = append(path,root.Val) //记录路径

        if root.Left == nil && root.Right == nil {//叶子节点
            if sum == 0 {  //存储路径
                slice := make([]int,len(path))
	        copy(slice[0:],path[0:])
                ret = append(ret,slice)
            }
            return ret
        }
        
        if root.Left != nil {
            ret = dfs(root.Left,path,ret,sum)
        }

        if root.Right != nil {
            ret = dfs(root.Right,path,ret,sum)
        }

        return ret
 }
