给定一个二叉树，返回其节点值自底向上的层次遍历。
（即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）

/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
 var res [][]int


func levelOrderBottom(root *TreeNode) [][]int {
	res = [][]int{}
	dfs(root, 0) //从0层开始深度优先遍历

  //反转数组
  l := len(res)
	end := l/2 //中点
	for i := 0; i < end; i++ {
		res[i], res[l-i-1] = res[l-i-1], res[i]
	}
	return res
}

//深度优先遍历
func dfs(root *TreeNode, level int) {
	if root != nil {
		if len(res) == level {
			res = append(res, []int{})
		}
		res[level] = append(res[level], root.Val)
		dfs(root.Left, level+1)
		dfs(root.Right, level+1)
	}
}
