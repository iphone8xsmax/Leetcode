给定一个二叉树，找出其最小深度。
最小深度是从根节点到最近叶子节点的最短路径上的节点数量。
说明: 叶子节点是指没有子节点的节点。

示例:
给定二叉树 [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
返回它的最小深度  2.

/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func minDepth(root *TreeNode) int {
	min := 0

	if root == nil {
		return min
	}
	var queue []*TreeNode

	queue = append(queue, root) //队列,root节点入队
	for len(queue) > 0 {
		qLen := len(queue)  //获取队列长度
		min++   //记录当前层数
		for i := 0; i < qLen; i++ {
			if queue[i].Right == nil && queue[i].Left == nil {  //判断是否叶子节点
				return min
			}

			if queue[i].Left != nil {
				queue = append(queue, queue[i].Left)
			}
			if queue[i].Right != nil {
				queue = append(queue, queue[i].Right)
			}
		}
		queue = queue[qLen:]  //将之前检查过的节点出队
	}
	return min
}
